// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2018 10:37:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    subtrator8bits_B_A
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module subtrator8bits_B_A_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [0:7] A;
input [0:7] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module subtrator8bits_B_A_vlg_check_tst (
	overflow,
	sinal,
	Z,
	sampler_rx
);
input  overflow;
input  sinal;
input [0:7] Z;
input sampler_rx;

reg  overflow_expected;
reg  sinal_expected;
reg [0:7] Z_expected;

reg  overflow_prev;
reg  sinal_prev;
reg [0:7] Z_prev;

reg  overflow_expected_prev;
reg  sinal_expected_prev;
reg [0:7] Z_expected_prev;

reg  last_overflow_exp;
reg  last_sinal_exp;
reg [0:7] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	overflow_prev = overflow;
	sinal_prev = sinal;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	overflow_expected_prev = overflow_expected;
	sinal_expected_prev = sinal_expected;
	Z_expected_prev = Z_expected;
end



// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 

// expected sinal
initial
begin
	sinal_expected = 1'bX;
end 
// expected Z[ 7 ]
initial
begin
	Z_expected[7] = 1'bX;
end 
// expected Z[ 6 ]
initial
begin
	Z_expected[6] = 1'bX;
end 
// expected Z[ 5 ]
initial
begin
	Z_expected[5] = 1'bX;
end 
// expected Z[ 4 ]
initial
begin
	Z_expected[4] = 1'bX;
end 
// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
end 
// generate trigger
always @(overflow_expected or overflow or sinal_expected or sinal or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected overflow = %b | expected sinal = %b | expected Z = %b | ",overflow_expected_prev,sinal_expected_prev,Z_expected_prev);
	$display("| real overflow = %b | real sinal = %b | real Z = %b | ",overflow_prev,sinal_prev,Z_prev);
`endif
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( sinal_expected_prev !== 1'bx ) && ( sinal_prev !== sinal_expected_prev )
		&& ((sinal_expected_prev !== last_sinal_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinal_expected_prev);
		$display ("     Real value = %b", sinal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sinal_exp = sinal_expected_prev;
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module subtrator8bits_B_A_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:7] A;
reg [0:7] B;
// wires                                               
wire overflow;
wire sinal;
wire [0:7] Z;

wire sampler;                             

// assign statements (if any)                          
subtrator8bits_B_A i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.overflow(overflow),
	.sinal(sinal),
	.Z(Z)
);
// A[ 7 ]
always
begin
	A[7] = 1'b1;
	A[7] = #10000 1'b0;
	# 10000;
	repeat(48)
	begin
		A[7] = 1'b1;
		A[7] = #10000 1'b0;
		# 10000;
	end
	A[7] = 1'b1;
	A[7] = #10000 1'b0;
	#10000;
end 
// A[ 6 ]
always
begin
	A[6] = 1'b1;
	# 10000;
	repeat(24)
	begin
		A[6] = 1'b0;
		A[6] = #20000 1'b1;
		# 20000;
	end
	A[6] = 1'b0;
	A[6] = #20000 1'b1;
	#10000;
end 
// A[ 5 ]
always
begin
	A[5] = 1'b0;
	# 10000;
	repeat(12)
	begin
		A[5] = 1'b1;
		A[5] = #40000 1'b0;
		# 40000;
	end
	A[5] = 1'b1;
	#30000;
end 
// A[ 4 ]
always
begin
	A[4] = 1'b0;
	# 50000;
	repeat(5)
	begin
		A[4] = 1'b1;
		A[4] = #80000 1'b0;
		# 80000;
	end
	A[4] = 1'b1;
	A[4] = #80000 1'b0;
	#70000;
end 
// A[ 3 ]
always
begin
	A[3] = 1'b0;
	# 130000;
	repeat(2)
	begin
		A[3] = 1'b1;
		A[3] = #160000 1'b0;
		# 160000;
	end
	A[3] = 1'b1;
	A[3] = #160000 1'b0;
	#70000;
end 
// A[ 2 ]
always
begin
	A[2] = 1'b0;
	A[2] = #290000 1'b1;
	A[2] = #320000 1'b0;
	A[2] = #320000 1'b1;
	#70000;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #610000 1'b1;
	#390000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	#1000000;
end 
// B[ 7 ]
always
begin
	B[7] = 1'b1;
	B[7] = #10000 1'b0;
	# 10000;
	repeat(48)
	begin
		B[7] = 1'b1;
		B[7] = #10000 1'b0;
		# 10000;
	end
	B[7] = 1'b1;
	B[7] = #10000 1'b0;
	#10000;
end 
// B[ 6 ]
always
begin
	B[6] = 1'b1;
	# 10000;
	repeat(24)
	begin
		B[6] = 1'b0;
		B[6] = #20000 1'b1;
		# 20000;
	end
	B[6] = 1'b0;
	B[6] = #20000 1'b1;
	#10000;
end 
// B[ 5 ]
always
begin
	B[5] = 1'b1;
	# 10000;
	repeat(12)
	begin
		B[5] = 1'b0;
		B[5] = #40000 1'b1;
		# 40000;
	end
	B[5] = 1'b0;
	#30000;
end 
// B[ 4 ]
always
begin
	B[4] = 1'b0;
	# 10000;
	repeat(6)
	begin
		B[4] = 1'b1;
		B[4] = #80000 1'b0;
		# 80000;
	end
	B[4] = 1'b1;
	#30000;
end 
// B[ 3 ]
always
begin
	B[3] = 1'b0;
	# 90000;
	repeat(2)
	begin
		B[3] = 1'b1;
		B[3] = #160000 1'b0;
		# 160000;
	end
	B[3] = 1'b1;
	B[3] = #160000 1'b0;
	#110000;
end 
// B[ 2 ]
always
begin
	B[2] = 1'b0;
	B[2] = #250000 1'b1;
	B[2] = #320000 1'b0;
	B[2] = #320000 1'b1;
	#110000;
end 
// B[ 1 ]
always
begin
	B[1] = 1'b0;
	B[1] = #570000 1'b1;
	#430000;
end 
// B[ 0 ]
always
begin
	B[0] = 1'b0;
	#1000000;
end 

subtrator8bits_B_A_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

subtrator8bits_B_A_vlg_check_tst tb_out(
	.overflow(overflow),
	.sinal(sinal),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

